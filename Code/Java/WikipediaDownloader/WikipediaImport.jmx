<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="title" elementType="Argument">
              <stringProp name="Argument.name">title</stringProp>
              <stringProp name="Argument.value">Lotus_(genus)</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose random articel" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">https://en.wikipedia.org/wiki/Special:Random</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Title-Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">title</stringProp>
            <stringProp name="RegexExtractor.regex">Location: (.*)/(.*)</stringProp>
            <stringProp name="RegexExtractor.template">$2$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Article" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">https://en.wikipedia.org/w/index.php?title=${title}&amp;printable=yes</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Prepare HTML and Images" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.nio.charset.StandardCharsets;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.FileOutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

new Runnable()
{
	public void run()
	{
 		String htmlBody = new String(data,StandardCharsets.UTF_8);
 		
 		htmlBody = this.cutOffUnimportantContent(htmlBody, &quot;a&quot;, &quot;\&quot;mw-jump-link\&quot;&quot;);
		htmlBody = this.cutOffUnimportantContent(htmlBody, &quot;a&quot;, &quot;\&quot;mw-jump-link\&quot;&quot;);
		htmlBody = this.cutOffUnimportantContent(htmlBody, &quot;div&quot;, &quot;\&quot;siteSub\&quot;&quot;);
		htmlBody = this.cutOffUnimportantContent(htmlBody, &quot;div&quot;, &quot;\&quot;mw-navigation\&quot;&quot;);
		htmlBody = this.cutOffUnimportantContent(htmlBody, &quot;div&quot;, &quot;\&quot;footer\&quot;&quot;);
		htmlBody = this.cutOffUnimportantContent(htmlBody, &quot;div&quot;, &quot;\&quot;printfooter\&quot;&quot;);
		htmlBody = this.cutOffUnimportantContent(htmlBody, &quot;div&quot;, &quot;\&quot;catlinks\&quot;&quot;);
		htmlBody = this.cutOffUnimportantContent(htmlBody, &quot;div&quot;, &quot;\&quot;mw-hidden-catlinks\&quot;&quot;);
 		
		Map sourceMap = new HashMap();
		int lastEndIndex = 0;
		
		while (true)
		{
			int srcStartIndex = htmlBody.indexOf(&quot;&lt;img &quot;, lastEndIndex);
			
			if (srcStartIndex == -1) break;
			srcStartIndex = srcStartIndex + 5;
			int srcEndIndex = htmlBody.indexOf(&quot;&gt;&quot;, srcStartIndex);
			String imgElement = htmlBody.substring(srcStartIndex,srcEndIndex);
			
			String src = this.getSource(imgElement);
			String imageId = UUID.randomUUID().toString();
			sourceMap.put(&quot;cid:&quot; + imageId,src);

			lastEndIndex = srcEndIndex;
		}

		for (Object entryObj : sourceMap.entrySet())
		{
			
			Map.Entry entry = (Map.Entry)entryObj;
			
			htmlBody = htmlBody.replace((String)entry.getValue(),(String)entry.getKey());
			
			String src = (String)entry.getValue();
			
			if (src.startsWith(&quot;//&quot;)) src = src.replaceFirst(&quot;//&quot;,&quot;https://&quot;);
			if (src.startsWith(&quot;/&quot;)) src = src.replaceFirst(&quot;/&quot;,&quot;https://en.wikipedia.org/&quot;);
			entry.setValue(src);
		}
		
		vars.putObject(&quot;images&quot;,sourceMap);
		vars.put(&quot;htmlBody&quot;,htmlBody);
		vars.putObject(&quot;imageCount&quot;,sourceMap.size());
		vars.put(&quot;imageBundle&quot;,&quot;&quot;);
	}

	public String cutOffUnimportantContent(String htmlBody, String tag, String id)
	{
		try
		{
			int startIndex = htmlBody.lastIndexOf(&quot;&lt;&quot;, htmlBody.indexOf(id));
			int endIndex = this.getEndIndex(htmlBody, tag, startIndex, 0);

			return htmlBody.replace(htmlBody.substring(startIndex, endIndex), &quot;&quot;);
		}
		catch (Exception e)
		{
			return htmlBody;
		}
	}

	public int getEndIndex(String htmlBody, String tag, int lastStartIndex, int depth)
	{
		if (lastStartIndex == -1) return -1;

		String startTag = &quot;&lt;&quot; + tag + &quot; &quot;;//todo Leerzeichen oder schlie√üende Klammer
		String endTag = &quot;&lt;/&quot; + tag + &quot;&gt;&quot;;

		int nextStartIndex = htmlBody.indexOf(startTag, lastStartIndex);
		int nextEndIndex = htmlBody.indexOf(endTag, lastStartIndex);

		if (nextStartIndex == -1) nextStartIndex = htmlBody.length();

		if (nextStartIndex &lt; nextEndIndex) return this.getEndIndex(htmlBody, tag, nextStartIndex + 1, depth + 1);

		if (depth != 1) return this.getEndIndex(htmlBody, tag, nextEndIndex + 1, depth - 1);

		return nextEndIndex + endTag.length();
	}

	public String getSource(String imgElement)
	{
		int srcStartIndex = imgElement.indexOf(&quot;src=\&quot;&quot;);
		if (srcStartIndex == -1) return null;
		srcStartIndex = srcStartIndex + 5;
		int srcEndIndex = imgElement.indexOf(&quot;\&quot;&quot;, srcStartIndex);
		String src = imgElement.substring(srcStartIndex,srcEndIndex);
		return src.length() &gt; 0 ? src : null;
	}
}.run();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Image Loop" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${imageCount}</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Image URL Setter" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.Map;
import java.util.ArrayList;

int imageIndex = vars.getObject(&quot;__jm__Image Loop__idx&quot;);

Map sourceMap =vars.getObject(&quot;images&quot;);
String key = (String)new ArrayList(sourceMap.keySet()).get(imageIndex);

vars.put(&quot;imageId&quot;, key);
vars.put(&quot;imageUrl&quot;, sourceMap.get(key));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image Downloader" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${imageUrl}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Image Template Creator" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String imageId = vars.get(&quot;imageId&quot;).replace(&quot;cid:&quot;,&quot;&quot;);
String image = Base64.getEncoder().encodeToString(data);
String imageTemplate = &quot;--------------C1652BD3D085C457919F5AE3\nContent-Type: image/png\nContent-Transfer-Encoding: base64\nContent-ID: &lt;${imageId}&gt;\nContent-Disposition: inline\n\n${image}\n&quot;;

imageTemplate = imageTemplate.replace(&quot;${image}&quot;,image);
imageTemplate = imageTemplate.replace(&quot;${imageId}&quot;,imageId);

String imageBundle = vars.get(&quot;imageBundle&quot;);
vars.put(&quot;imageBundle&quot;,imageBundle + imageTemplate);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Mail Creator" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.util.UUID;

String imageBundle = vars.get(&quot;imageBundle&quot;).trim();
String mail = &quot;From: root@mail.de\nTo: administrator@mail.de\nSubject: ${subject}\nMessage-ID: &lt;${messageId}&gt;\nDate: Wed, 22 Aug 2018 11:55:33 +0200\nMIME-Version: 1.0\nContent-Type: multipart/related;\n boundary=\&quot;------------C1652BD3D085C457919F5AE3\&quot;\n\n--------------C1652BD3D085C457919F5AE3\nContent-Type: text/html; charset=utf-8\n\n${html}\n\n${images}\n--------------C1652BD3D085C457919F5AE3--\n&quot;;

mail = mail.replace(&quot;${subject}&quot;,vars.get(&quot;title&quot;));
mail = mail.replace(&quot;${messageId}&quot;,UUID.randomUUID().toString());
mail = mail.replace(&quot;${html}&quot;,vars.get(&quot;htmlBody&quot;));
mail = mail.replace(&quot;${images}&quot;,imageBundle);

vars.put(&quot;mail&quot;,mail);

vars.put(&quot;imageBundle&quot;,&quot;&quot;);
vars.put(&quot;htmlBody&quot;,&quot;&quot;);
vars.putObject(&quot;images&quot;,null);
vars.put(&quot;imageId&quot;, &quot;&quot;);
vars.put(&quot;imageUrl&quot;, &quot;&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Save Result Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.nio.charset.StandardCharsets;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.FileOutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

new Runnable()
{
	public void run()
	{
		String output = vars.get(&quot;mail&quot;);
		//JOptionPane.showMessageDialog(null,System.getProperty(&quot;user.dir&quot;));
		String path = &quot;/media/data/Freizeit/wikipedia_downloader/&quot; + vars.get(&quot;title&quot;) + &quot;.eml&quot;;
		this.writeByteArrayToFile(new File(path),output.getBytes(StandardCharsets.UTF_8));
		//JOptionPane.showMessageDialog(null,imageBundle);
		//JOptionPane.showInputDialog(null,&quot;title&quot;,Label.toString());
	}
	
	public void writeByteArrayToFile(File file, byte[] data) 
	{
		FileOutputStream out = null;
		try
		{
			out = new FileOutputStream(file);
			out.write(data);
			out.close();
		}
		catch (Exception e){}
		finally {try { out.close();} catch (Exception e2){}}
	}
}.run();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
