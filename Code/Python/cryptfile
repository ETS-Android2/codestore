#!/usr/bin/python
#coding=UTF-8

import sys
import os
import subprocess
import shlex
import shutil

# TODO: Shellbefehle kann man auch so ausführen: retcode = os.system("echo 'foo' &> /dev/null")

class Associations:
	mountPoint = ""
	mapper = ""
	loopDevice = ""

def main():
	
	# Berechtigung prüfen
	if (os.geteuid() != 0):
		exit("no permissions");
		
	# Argumente prüfen
	if (len(sys.argv) == 1):
		printUsage();
		exit();
		
	if (sys.argv[1] != "list" and
	    sys.argv[1] != "create" and
	    sys.argv[1] != "mount" and
	    sys.argv[1] != "umount"
	   ):
		printUsage();
		exit();
	
	if (sys.argv[1] == "list"):
		listMountedContainers();
	
	if (sys.argv[1] == "create"):
		if (len(sys.argv) < 4):
			printUsage();
			exit();
		if (os.path.isfile(sys.argv[2]) or os.path.isdir(sys.argv[2])):
			print "[" + sys.argv[2] + "] already exists.";
			exit();
		if (not unicode(sys.argv[3]).isnumeric()):
			print "[" + sys.argv[3] + "] is not a number. Please type the container size in MB without unit.";
			exit();
		createContainer(sys.argv[2], sys.argv[3]);
	
	if (sys.argv[1] == "mount"):
		if (len(sys.argv) < 3):
			printUsage();
			exit();
		if (not os.path.isfile(sys.argv[2])):
			print "[" + sys.argv[2] + "] is not a file.";
			exit();
		if (getAssociations(sys.argv[2]) != None):
			print "[" + sys.argv[2] + "] is already mounted.";
			exit();
		if (subprocess.call(shlex.split("losetup -f"), stdout=open(os.devnull, 'w'), stderr=subprocess.STDOUT) != 0):
			print "No empty loop device found.";
			exit();
		mountContainer(sys.argv[2]);
	
	if (sys.argv[1] == "umount"):
		if (len(sys.argv) < 3):
			printUsage();
			exit();
		associations = getAssociations(sys.argv[2]);
		if (associations == None):
			print "[" + sys.argv[2] + "] is not mounted.";
			exit();
		unmountContainer(associations);
	
def printUsage():
	print "Usage:";
	print "cryptfile.py create <file> <size> - creates a luks file container (<size> is the container size in MB)";
	print "                                       <file> specifies the name of the new container file";
	print "                                       <size> specifies the container size in MB (mention without unit)";
	print "cryptfile.py mount <file> - mount a luks file container";
	print "cryptfile.py umount <file> - unmount a luks file container";
	print "cryptfile.py list - list mounted file containers";

def getAssociations(filePath):
	filePath = os.path.realpath(filePath);
	for fso in os.listdir("/media"):
		if (fso.find("crypt_loop") != 0): continue;
		p = subprocess.Popen(shlex.split("losetup -l -O BACK-FILE /dev/" + fso.replace("crypt_","")),stdout = subprocess.PIPE,stdin = subprocess.PIPE);
		p.stdout.readline();
		currentPath = p.stdout.readline().strip();
		if (currentPath == filePath):
			result = Associations();
			result.mountPoint = "/media/" + fso;
			result.mapper = "/dev/mapper/" + fso;
			result.loopDevice = "/dev/" + fso.replace("crypt_","");
			return result;
	return;

def listMountedContainers():
	for fso in os.listdir("/media"):
		if (fso.find("crypt_loop") != 0): continue;
		p = subprocess.Popen(["losetup", "-l", "-O", "BACK-FILE", "/dev/" + fso.replace("crypt_","")],stdout = subprocess.PIPE,stdin = subprocess.PIPE);
		p.stdout.readline();
		filePath = p.stdout.readline().strip();
		print "/media/" + fso + " => " + filePath;

def createContainer(container, size):

	p = subprocess.Popen(["losetup", "-f"],stdout = subprocess.PIPE,stdin = subprocess.PIPE);
	loopDevice = p.stdout.readline().strip();
	mapper = "crypt_" + loopDevice.split("/")[2];
	mountPoint = "/media/" + mapper;
	
	# Kontainer mit zufälligen Werten füllen
	# TODO: was wenn ein absoluter Pfad mit Leerzeichen als container übergeben wurde
	subprocess.call(["dd", "if=/dev/urandom", "of=" + container, "bs=1M", "count=" + size]);
	
	# Kontainer im Loop-Gerät einhängen
	subprocess.call(["losetup", loopDevice, container]);
	
	# LUKS-Dateisystem anlegen (Passwort wird abgefragt)
	subprocess.call(["cryptsetup", "luksFormat", "-c", "aes-xts-plain64", "-s", "512", "-h", "sha512", loopDevice]);
	
	# das verschlüsselte Gerät öffnen (Passwort wird erneut abgefragt)
	subprocess.call(["cryptsetup", "luksOpen", loopDevice, mapper]);
	
	# virtuelles Dateisystem anlegen
	subprocess.call(["mkfs.ext4", "/dev/mapper/" + mapper]);
	
	# Einhängepunkt erzeugen
	if not os.path.exists(mountPoint): os.makedirs(mountPoint);
	
	# Mapper ins Dateisystem einhängen
	subprocess.call(["mount", "-t", "ext4", "/dev/mapper/" + mapper, mountPoint]);
	
	# den Aufrufer zum Besitzer des virtuellen Dateisystems machen
	os.system("chown " + os.environ["SUDO_USER"] + ":" + os.environ["SUDO_USER"] + " " + mountPoint);
	
	# virtuelles Dateisystem aushängen
	os.system("umount " + mountPoint);
	
	# MountPoint entfernen
	shutil.rmtree(mountPoint);
	
	# verschlüsseltes Gerät schließen
	subprocess.call(["cryptsetup", "luksClose", mapper]);
	
	# Kontainer aus Loop-Gerät entfernen
	subprocess.call(["losetup", "-d", loopDevice])
	
	# den Aufrufer zum Besitzer des Kontainers machen
	subprocess.call(["chown", os.environ["SUDO_USER"] + ":" + os.environ["SUDO_USER"], container]);

def mountContainer(container):
	
	p = subprocess.Popen(["losetup", "-f"],stdout = subprocess.PIPE,stdin = subprocess.PIPE);
	loopDevice = p.stdout.readline().strip();
	mapper = "crypt_" + loopDevice.split("/")[2];
	mountPoint = "/media/" + mapper;
	
	# Container im Loop-Gerät einhängen
	subprocess.call(["losetup", loopDevice, container]);
	
	# Loop-Gerät im Mapper öffnen (Passwort wird abgefragt)
	subprocess.call(["cryptsetup", "luksOpen", loopDevice, mapper]);
	
	# Einhängepunkt erzeugen
	if not os.path.exists(mountPoint): os.makedirs(mountPoint);
	
	# Mapper ins Dateisystem einhängen
	subprocess.call(["mount", "-t", "ext4", "/dev/mapper/" + mapper, mountPoint]);
	
	print "[" + container + "] mounted on [" + mountPoint + "]";

def unmountContainer(associations):
	
	# virtuelles Dateisystem aushängen
	if (os.system("umount " + associations.mountPoint) != 0): exit();
	
	# Mapper auflösen
	if (os.system("cryptsetup luksClose " + associations.mapper) != 0): exit();
	
	# Kontainer aus Loop-Gerät entfernen
	if (os.system("losetup -d " + associations.loopDevice) != 0): exit();
	
	# MountPoint entfernen
	shutil.rmtree(associations.mountPoint);

main();
